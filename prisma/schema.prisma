datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  clientId      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Client    Client?  @relation(fields: [clientId], references: [id])
}

model Client {
  id           String         @id @default(cuid())
  name         String         @unique
  addrees      String?
  collaborator Collaborator[]
  sector       Sector[]
  user         User[]
  device       Device[]
}

model Collaborator {
  id           String   @id @default(cuid())
  name         String   @unique
  imageProfile String?
  clientId     String
  sectorId     String?
  Device       Device[]
  sector       Sector?  @relation(fields: [sectorId], references: [id], onDelete: SetNull)
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Device {
  id             String   @id @default(cuid())
  sectorId       String?
  collaboratorId String?
  image          String?
  name           String
  description    String?
  clientId       String
  registerNumber Int?     @unique
  manufacturer   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  collaborator Collaborator? @relation(fields: [collaboratorId], references: [id], onDelete: SetNull)
  sector       Sector?       @relation(fields: [sectorId], references: [id], onDelete: SetNull)
  Client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Sector {
  id           String         @id @default(cuid())
  name         String         @unique
  coordinator  String?
  clientId     String
  Device       Device[]
  Collaborator Collaborator[]
  Client       Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

///////////////////////////////////////////////
///////////////////////////////////////////////
//gerenciamento de conta e autenticação
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
